plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.starter'
version = '0.0.1-SNAPSHOT'
description = 'lib'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-graphql'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // queryDSL
    implementation("com.querydsl:querydsl-jpa:5.0.0:jakarta")
    annotationProcessor("com.querydsl:querydsl-apt:5.0.0:jakarta")
    annotationProcessor("jakarta.annotation:jakarta.annotation-api")
    annotationProcessor("jakarta.persistence:jakarta.persistence-api")
}

tasks.named('test') {
    useJUnitPlatform()
}

def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
    options.encoding = "UTF-8"
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [generated]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}

bootJar {
    enabled = false
}

jar {
    enabled = true

}

// JAR 파일 복사 task 정의
tasks.register('copyJarToDeployment', Copy) {
    dependsOn jar

    def destinations = [
            "../../starter-pack/user/lib",
            "../../starter-pack/menu/lib"
    ]

    doFirst {
        println "=== Starting JAR copy process ==="
        // 각 대상 디렉토리 확인 및 생성
        destinations.forEach { dest ->
            def destDir = file(dest)
            if (!destDir.exists()) {
                println "Creating directory: ${destDir.absolutePath}"
                destDir.mkdirs()
            }
            // 디렉토리 권한 확인
            println """
                Directory: ${destDir.absolutePath}
                Exists: ${destDir.exists()}
                Can Write: ${destDir.canWrite()}
                Is Directory: ${destDir.isDirectory()}
            """
        }
    }




    // 각 destination마다 별도의 복사 작업 설정
    destinations.each { dest ->
        copy {
            from("build/libs") {
                include "*.jar"
            }
            into file(dest)
            duplicatesStrategy = DuplicatesStrategy.INCLUDE
        }
    }

    doLast {
        println "=== JAR copy completed ==="
        destinations.forEach { dest ->
            def destDir = file(dest)
            println "Files in ${destDir.absolutePath}:"
            destDir.listFiles()?.each { file ->
                println " - ${file.name} (${file.length()} bytes)"
            }
        }
    }


}

// build task가 완료된 후 자동으로 copyJarToDeployment task가 실행되도록 설정
build.finalizedBy(copyJarToDeployment)